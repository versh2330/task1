/**
 * Created by alex on 08.03.2017.
 */
import org.testng.annotations.*;
import org.testng.annotations.BeforeGroups;
import static org.testng.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class PenTest {

    Pen pen;
    int inkContainerValue;
    double sizeLetter;
    String color;
    String inputString;


    @Parameters({"inkContainerValue", "sizeLetter", "color", "inputString"})
    @BeforeGroups(groups = "workingPen")
    public void setUpWorkingPen(int inkContainerValue, double sizeLetter, String color, String inputString) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
        this.inkContainerValue = inkContainerValue;
        this.sizeLetter = sizeLetter;
        this.color = color;
       this.inputString = inputString;
    }


    @Parameters({"inkContainerValue", "sizeLetter", "color", "inputString"})
    @BeforeGroups(groups = "emptyPen")
    public void setUpEmptyPen(int inkContainerValue, double sizeLetter, String color, String inputString) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
        this.inkContainerValue = inkContainerValue;
        this.sizeLetter = sizeLetter;
        this.color = color;
       this.inputString = inputString;
    }

    @Parameters({"inkContainerValue", "sizeLetter", "color", "inputString"})
    @BeforeGroups(groups = "other")
    public void setUpUsedPen(int inkContainerValue, double sizeLetter, String color, String inputString) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
        this.inkContainerValue = inkContainerValue;
        this.sizeLetter = sizeLetter;
        this.color = color;
       this.inputString = inputString;
    }

    @Test(groups = "workingPen")
    public void isWorkTrueTest() {
        boolean full = pen.isWork();
        assertEquals(full, true);
    }

    @Test(groups = "emptyPen")
    public void isWorkFalseTest() {
        boolean full = pen.isWork();
        assertEquals(full, false);
    }

    @Test(groups = "emptyPen", dependsOnMethods = "isWorkFalseTest")
    public void penEmptyTest() {
        assertEquals(pen.write(inputString), "");
    }

    @Test(groups = "workingPen", dependsOnMethods = "isWorkTrueTest")
    public void writeWholeWordTest() {
        assertEquals(pen.write(inputString), inputString);
    }


    @Test(groups = "other")
    public void notEnoughInk() {
        assertEquals(pen.write(inputString), inputString.substring(0, inkContainerValue));

    }

    @Test(groups = "other")
    public void getColorTest() {
        assertEquals(pen.getColor(), color);
    }

    @Test(groups = "other")
    public void doSomethingElseTest() {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        PrintStream old = System.out;
        System.setOut(ps);
        pen.doSomethingElse();
        System.out.flush();
        System.setOut(old);
        assertEquals((baos.toString().trim()), color);
    }

    // ??????
    @DataProvider(name = "provider")
    public Object[][] provide () {
        return new Object[][] {{10, 1.0}};
    }


    @Test(dataProvider = "provider")
    public void writeUntilEmpty(int inkContainer, double letterSize) {
        pen = new Pen(inkContainer, letterSize);
        String inputString = "Tested";
        int numberOfWords = (int) (inkContainer / (letterSize * inputString.length())); // division by 0
        //System.out.println(numberOfWords);
        for (int i = 0; i < numberOfWords; i++) {
            assertEquals(pen.write(inputString), inputString);
        }
        //System.out.println(pen.write(inputString));
        assertEquals(pen.write(inputString), inputString.substring(0,  inkContainerValue));

    }



}


